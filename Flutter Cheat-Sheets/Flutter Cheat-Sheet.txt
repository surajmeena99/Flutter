1. App Icon Generator: IconKitchen
   https://icon.kitchen/i/H4sIAAAAAAAAA6tWKkvMKU0tVrKqVkpJLMoOyUjNTVWySkvMKU6t1VHKzU8pzQHJRisl5qUU5WemKOkoZeYXA8ny1CSl2FoApT8%2BHkAAAAA%3D

1.1 Feature Graphic Image: Hotpot.ai
    https://hotpot.ai/templates/google-play-feature-graphic

2. App Screenshot: flyCricket
   https://app.flycricket.com/screenshots/edit/2dd31ad7-6bfe-4070-a411-10170ff96c84

3. Privacy Policy and Term and Conditions: https://sites.google.com/view/surajriders/home
   https://app-privacy-policy-generator.firebaseapp.com/
   https://www.freeprivacypolicy.com/

4. Signing Certificate Command: S:\Flutter Apps\firebase_app\android> ./gradlew signingReport
   SHA1:
   SHA-256:

5. Build and release an Android app:
   (1.) Generate Keystore file: keytool -genkey -v -keystore upload-keystore.jks -keyalg RSA -keysize 2048 -validity 10000 -alias upload
 
        [Note: Run this command into the android>app folder (..\android\app)]
   (2.) Create key.properties file in android folder and write these:
        storePassword=your_password
        keyPassword=your_password
        keyAlias=upload
        storeFile=../app/upload-keystore.jks

   (3.) Add the keystore information from your properties file before the android block in [project]/android/app/build.gradle file:
        def keystoreProperties = new Properties()
        def keystorePropertiesFile = rootProject.file('key.properties')
        if (keystorePropertiesFile.exists()) {
           keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
         }

   (4.) Find the 'buildTypes' block in [project]/android/app/build.gradle file And replace it with the following signing configuration info:
        signingConfigs {
           release {
              keyAlias keystoreProperties['keyAlias']
              keyPassword keystoreProperties['keyPassword']
              storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
              storePassword keystoreProperties['storePassword']
           }
        }
        buildTypes {
           release {
              signingConfig signingConfigs.release
           }
        }

6. for App Bundle: Run flutter build appbundle
   file location: √ Built build\app\outputs\bundle\release\app-release.aab (24.6MB).

7. for App APK File: Run flutter build apk OR Run flutter build apk --release
   file location: √  Built build\app\outputs\flutter-apk\app-release.apk (24.4MB).

8. Flutter Firebase CLI:->
   (1.) Install Node.js
   (2.) Run npm install -g firebase-tools
   (3.) Run firebase login
   (4.) Run dart pub global activate flutterfire_cli
   (5.) At the root of your Flutter project directory,
        Run flutterfire configure OR Run flutterfire configure --project=project_name
        
        This automatically register your pre-platform apps with Firebase and adds a lib/firebase_options.dart configuration file to your Flutter project.
   (6.) Run flutter pub add firebase_core
   (7.) Run flutter pub add firebase_auth
   (8.) Run flutterfire configure
   (9.) In "lib/main.dart" file, import the Firebase core plugin and the configuration file you generated earlier:
        import 'package:firebase_core/firebase_core.dart';
        import 'firebase_options.dart';

   (10.) Also in "lib/main.dart" file, initialize Firebase using the DefaultFirebaseOptions object exported by the configuration file.
         void main() async {
           WidgetsFlutterBinding.ensureInitialized();

           await Firebase.initializeApp(
             options: DefaultFirebaseOptions.currentPlatform, 
           );

           runApp(const MyApp());
         }
